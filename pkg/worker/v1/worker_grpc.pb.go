// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: worker/v1/worker.proto

package workerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerServiceClient interface {
	RegisterTasks(ctx context.Context, in *RegisterTasksRequest, opts ...grpc.CallOption) (*RegisterTasksResponse, error)
	StreamResults(ctx context.Context, in *StreamResultsRequest, opts ...grpc.CallOption) (WorkerService_StreamResultsClient, error)
	CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) RegisterTasks(ctx context.Context, in *RegisterTasksRequest, opts ...grpc.CallOption) (*RegisterTasksResponse, error) {
	out := new(RegisterTasksResponse)
	err := c.cc.Invoke(ctx, "/worker.v1.WorkerService/RegisterTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) StreamResults(ctx context.Context, in *StreamResultsRequest, opts ...grpc.CallOption) (WorkerService_StreamResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkerService_ServiceDesc.Streams[0], "/worker.v1.WorkerService/StreamResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerServiceStreamResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkerService_StreamResultsClient interface {
	Recv() (*StreamResultsResponse, error)
	grpc.ClientStream
}

type workerServiceStreamResultsClient struct {
	grpc.ClientStream
}

func (x *workerServiceStreamResultsClient) Recv() (*StreamResultsResponse, error) {
	m := new(StreamResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerServiceClient) CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error) {
	out := new(CancelTaskResponse)
	err := c.cc.Invoke(ctx, "/worker.v1.WorkerService/CancelTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/worker.v1.WorkerService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
// All implementations should embed UnimplementedWorkerServiceServer
// for forward compatibility
type WorkerServiceServer interface {
	RegisterTasks(context.Context, *RegisterTasksRequest) (*RegisterTasksResponse, error)
	StreamResults(*StreamResultsRequest, WorkerService_StreamResultsServer) error
	CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
}

// UnimplementedWorkerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWorkerServiceServer struct {
}

func (UnimplementedWorkerServiceServer) RegisterTasks(context.Context, *RegisterTasksRequest) (*RegisterTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTasks not implemented")
}
func (UnimplementedWorkerServiceServer) StreamResults(*StreamResultsRequest, WorkerService_StreamResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamResults not implemented")
}
func (UnimplementedWorkerServiceServer) CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedWorkerServiceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}

// UnsafeWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServiceServer will
// result in compilation errors.
type UnsafeWorkerServiceServer interface {
	mustEmbedUnimplementedWorkerServiceServer()
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_RegisterTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).RegisterTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.v1.WorkerService/RegisterTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).RegisterTasks(ctx, req.(*RegisterTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_StreamResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServiceServer).StreamResults(m, &workerServiceStreamResultsServer{stream})
}

type WorkerService_StreamResultsServer interface {
	Send(*StreamResultsResponse) error
	grpc.ServerStream
}

type workerServiceStreamResultsServer struct {
	grpc.ServerStream
}

func (x *workerServiceStreamResultsServer) Send(m *StreamResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkerService_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.v1.WorkerService/CancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).CancelTask(ctx, req.(*CancelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.v1.WorkerService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerService_ServiceDesc is the grpc.ServiceDesc for WorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worker.v1.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTasks",
			Handler:    _WorkerService_RegisterTasks_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _WorkerService_CancelTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _WorkerService_GetTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamResults",
			Handler:       _WorkerService_StreamResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "worker/v1/worker.proto",
}
